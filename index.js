// require('dotenv').config();
// const { Telegraf } = require('telegraf');
// const fs = require('fs');
// const axios = require('axios');

// const bot = new Telegraf(process.env.BOT_TOKEN);
// const templates = JSON.parse(fs.readFileSync('templates.json', 'utf-8'));

// function findAnswer(msg) {
//   const lower = msg.toLowerCase();
//   for (const t of templates) {
//     if (lower.includes(t.key.toLowerCase())) {
//       return t.value;
//     }
//   }
//   return null; // –µ–≥–µ—Ä —Ç–∞–±—ã–ª–º–∞—Å–∞
// }

// async function askGPT(question) {
//   const res = await axios.post(
//     'https://api.openai.com/v1/chat/completions',
//     {
//       model: 'gpt-3.5-turbo',
//       messages: [
//         { role: 'system', content: '–°–µ–Ω —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä–µ—Ç—ñ–Ω –∫”©–º–µ–∫—à—ñ –±–æ—Ç—Å—ã“£.' },
//         { role: 'user', content: question }
//       ]
//     },
//     {
//       headers: {
//         'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
//         'Content-Type': 'application/json'
//       }
//     }
//   );
//   return res.data.choices[0].message.content.trim();
// }

// bot.start((ctx) => ctx.reply("–°”ô–ª–µ–º! –ú–µ–Ω —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä–µ–º."));
// bot.help((ctx) => ctx.reply("–°“±—Ä–∞“õ “õ–æ–π: “ö“±–∂–∞—Ç—Ç–∞—Ä “õ–∞–Ω–¥–∞–π? –ì—Ä–∞–Ω—Ç –±–∞—Ä –º–∞? —Ç.—Å.—Å."));
// bot.on('text', async (ctx) => {
//   const userText = ctx.message.text;
//   const answer = findAnswer(userText);

//   if (answer) {
//     ctx.reply(answer);
//   } else {
//     ctx.reply("*** –ú–µ–Ω –±“±–ª —Å“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä–µ –∞–ª–º–∞–π–º—ã–Ω, ”©–π—Ç–∫–µ–Ω—ñ –æ–Ω–¥–∞ '–•–∞–ª–µ–ª –î–æ—Å–º“±—Ö–∞–º–µ–¥–æ–≤ –∞—Ç—ã–Ω–¥–∞“ì—ã –ê—Ç—ã—Ä–∞—É —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ' –ö–ï–ê“ö —Ç—É—Ä–∞–ª—ã –Ω–∞“õ—Ç—ã –∞“õ–ø–∞—Ä–∞—Ç –∂–æ“õ *** –Ø –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ù–ê–û '–ê—Ç—ã—Ä–∞—É—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–º–µ–Ω–∏ –•–∞–ª–µ–ª–∞ –î–æ—Å–º—É—Ö–∞–º–µ–¥–æ–≤–∞' ***");
//     try {
//       const aiAnswer = await askGPT(userText);
//       ctx.reply(aiAnswer);
//     } catch (err) {
//       ctx.reply("*** –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã “õ–∞–π—Ç–∞–ª–∞“£—ã–∑ –Ω–µ–º–µ—Å–µ “õ–æ—Å—ã–º—à–∞ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä –±–µ—Ä—ñ“£—ñ–∑ ***  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π ***");
//       console.error(err);
//     }
//   }
// });

// bot.launch();
// console.log("‚úÖ Telegram AI-–±–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã");


require('dotenv').config();
const { Telegraf } = require('telegraf');
const fs = require('fs');
const axios = require('axios');

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const KNOWLEDGE_FILE = 'system.txt';

if (!BOT_TOKEN || !GEMINI_API_KEY) {
    console.error("“ö–∞—Ç–µ: BOT_TOKEN –Ω–µ–º–µ—Å–µ GEMINI_API_KEY .env —Ñ–∞–π–ª—ã–Ω–¥–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω.");
    process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

let knowledgeBase = '';
try {
    knowledgeBase = fs.readFileSync(KNOWLEDGE_FILE, 'utf-8');
    console.log(`‚úÖ '${KNOWLEDGE_FILE}' —Ñ–∞–π–ª—ã–Ω–∞–Ω –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å”ô—Ç—Ç—ñ –æ“õ—ã–ª–¥—ã.`);
} catch (error) {
    console.error(`“ö–∞—Ç–µ: '${KNOWLEDGE_FILE}' —Ñ–∞–π–ª—ã–Ω –æ“õ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –§–∞–π–ª–¥—ã“£ –±–∞—Ä –µ–∫–µ–Ω—ñ–Ω–µ –∫”©–∑ –∂–µ—Ç–∫—ñ–∑—ñ“£—ñ–∑.`);
    process.exit(1);
}


async function askGemini(question) {
    const systemPrompt = `
–°–µ–Ω ‚Äî –•–∞–ª–µ–ª –î–æ—Å–º“±—Ö–∞–º–µ–¥–æ–≤ –∞—Ç—ã–Ω–¥–∞“ì—ã –ê—Ç—ã—Ä–∞—É —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–Ω—ñ“£ —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä—ñ–Ω–µ –∫”©–º–µ–∫—Ç–µ—Å–µ—Ç—ñ–Ω AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—Å—ñ“£.
–°–µ–Ω—ñ“£ –º—ñ–Ω–¥–µ—Ç—ñ“£ ‚Äî —Ç–µ–∫ “õ–∞–Ω–∞ —Ç”©–º–µ–Ω–¥–µ –±–µ—Ä—ñ–ª–≥–µ–Ω –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ –∂–∞—É–∞–ø –±–µ—Ä—É.
”®–∑—ñ“£–Ω–µ–Ω –µ—à“õ–∞–Ω–¥–∞–π –∞“õ–ø–∞—Ä–∞—Ç “õ–æ—Å–ø–∞. –ï–≥–µ—Ä –∂–∞—É–∞–ø –±–∞–∑–∞–¥–∞ –∂–æ“õ –±–æ–ª—Å–∞, "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –±“±–ª —Å“±—Ä–∞“õ –±–æ–π—ã–Ω—à–∞ –º–µ–Ω–¥–µ –Ω–∞“õ—Ç—ã –∞“õ–ø–∞—Ä–∞—Ç –∂–æ“õ" –¥–µ–ø –∂–∞—É–∞–ø –±–µ—Ä.
–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ —Ç—ñ–ª—ñ–Ω–¥–µ (“õ–∞–∑–∞“õ—à–∞ –Ω–µ–º–µ—Å–µ –æ—Ä—ã—Å—à–∞) –∂–∞—É–∞–ø –±–µ—Ä.

--- –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô ---
${knowledgeBase}
--- –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –°–û“¢–´ ---
`;

    // const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-lite:generateContent?key=${GEMINI_API_KEY}`;
    const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-lite:GenerateContent?key=${GEMINI_API_KEY}`;

    const payload = {
        contents: [{
            parts: [{ text: question }]
        }],
        systemInstruction: {
            parts: [{ text: systemPrompt }]
        }
    };

    try {
        const response = await axios.post(API_URL, payload, {
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.data.candidates && response.data.candidates.length > 0) {
            const content = response.data.candidates[0].content;
            if (content && content.parts && content.parts.length > 0) {
                return content.parts[0].text.trim();
            }
        }
        throw new Error("API –∂–∞—É–∞–±—ã–Ω–¥–∞ –º–∞–∑–º“±–Ω —Ç–∞–±—ã–ª–º–∞–¥—ã.");

    } catch (error) {
        console.error("Gemini API “õ–∞—Ç–µ—Å—ñ:", error.response ? error.response.data : error.message);
        throw new Error("Gemini API-–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.");
    }
}

bot.start((ctx) => ctx.reply("–°”ô–ª–µ–º! –ú–µ–Ω –•–∞–ª–µ–ª –î–æ—Å–º“±—Ö–∞–º–µ–¥–æ–≤ –∞—Ç—ã–Ω–¥–∞“ì—ã –ê—Ç—ã—Ä–∞—É —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—É–≥–µ –¥–∞–π—ã–Ω–º—ã–Ω."));
bot.help((ctx) => ctx.reply("–ú–∞“ì–∞–Ω –∫–µ–∑ –∫–µ–ª–≥–µ–Ω —Å“±—Ä–∞“õ—Ç—ã “õ–æ–π—ã“£—ã–∑, –º—ã—Å–∞–ª—ã: '–ì—Ä–∞–Ω—Ç“õ–∞ —Ç“Ø—Å—É “Ø—à—ñ–Ω –Ω–µ —ñ—Å—Ç–µ—É –∫–µ—Ä–µ–∫?' –Ω–µ–º–µ—Å–µ 'Platonus-—Ç–∞–Ω –ø–∞—Ä–æ–ª—å–¥—ñ “õ–∞–ª–∞–π –∞–ª–∞–º—ã–Ω?'."));

bot.on('text', async (ctx) => {
    const userText = ctx.message.text;
    console.log(`[${new Date().toLocaleTimeString()}] –ñ–∞“£–∞ —Å“±—Ä–∞“õ: "${userText}"`);

    const thinkingMessage = await ctx.reply("–û–π–ª–∞–Ω—É–¥–∞–º—ã–Ω, —Å”ô–ª –∫“Ø—Ç–µ —Ç“±—Ä—ã“£—ã–∑... üß†");

    try {
        const aiAnswer = await askGemini(userText);
        await ctx.telegram.editMessageText(
            ctx.chat.id,
            thinkingMessage.message_id,
            null,
            aiAnswer
        );
    } catch (err) {
        await ctx.telegram.editMessageText(
            ctx.chat.id,
            thinkingMessage.message_id,
            null,
            "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –°”ô–ª–¥–µ–Ω —Å–æ“£ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑."
        );
    }
});

bot.launch();
console.log("‚úÖ Telegram AI-–±–æ—Ç (Axios) –∂–∞“£–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π–º–µ–Ω —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!");
